<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mailMapper">
		
	<select id="countList" resultType="int">
	    SELECT COUNT(*)
	    FROM
	    (
	    <trim prefixOverrides="UNION ALL">
	    <if test="!'받는메일함'.equals(categoryName)">
	        select 
	            M.NO AS MAIL_NO
	            ,M.SEND_USER AS USER_NO
	            ,MM.NAME AS USER_NAME
	            ,MM.EMAIL AS USER_EMAIL
	            ,M.DELETE_YN
	            ,M.TITLE
	            ,M.CONTENT
	            ,M.SEND_TIME
	            ,C.NO AS CATEGORY_NO
	            ,C.NAME AS CATEGORY_NAME
	            ,'Y' as ISSENDER
	            ,'Y' as CHECK_YN
	        from mail m
	        join member mm on mm.no = m.SEND_USER
	        LEFT JOIN M_DRAWER D ON M.NO = D.MAIL_NO 
	        LEFT JOIN M_CATEGORY C ON C.NO = D.CATEGORY_NO
	        WHERE MM.NO = ${userNo}
	        AND (USER_NO = ${userNo} OR USER_NO IS NULL)
	        AND 
		    <if test="'임시보관함'.equals(categoryName)">
		    	SAVE_YN = 'Y'
		    </if>
		    <if test="!'임시보관함'.equals(categoryName)">
		    	SAVE_YN = 'N'
		    </if>
		</if>
		<if test="!'보낸메일함'.equals(categoryName) and !'임시보관함'.equals(categoryName)">
	        UNION ALL
	        select 
	            M.NO AS MAIL_NO
	            ,M.SEND_USER AS USER_NO
	            ,M2.NAME AS USER_NAME
	            ,M2.EMAIL AS USER_EMAIL
	            ,R.DELETE_YN
	            ,M.TITLE
	            ,M.CONTENT
	            ,M.SEND_TIME
	            ,C.NO AS CATEGORY_NO
	            ,C.NAME AS CATEGORY_NAME
	            ,'N' as ISSENDER
	            ,R.CHECK_YN as CHECK_YN
	        from R_MAIL R
	        JOIN MEMBER M1 ON M1.EMAIL = R.EMAIL
	        JOIN MAIL M ON R.MAIL_NO = M.NO
	        JOIN MEMBER M2 ON M2.NO = M.SEND_USER
	        LEFT JOIN M_DRAWER D ON M.NO = D.MAIL_NO 
	        LEFT JOIN M_CATEGORY C ON C.NO = D.CATEGORY_NO
	        WHERE  R.EMAIL = #{userEmail}
	        AND SAVE_YN = 'N'
	        AND (USER_NO = ${userNo} OR USER_NO IS NULL)
		</if>
		</trim>
	    )
	    WHERE
	    <if test="'휴지통'.equals(categoryName)">
	    	DELETE_YN = 'Y'
	    </if>
	    <if test="!'휴지통'.equals(categoryName)">
	    	DELETE_YN = 'N'
	    </if>
		<if test=" category!=null and category != '' and category != 'null' ">
            AND CATEGORY_NO = ${category}
        </if>
        <if test=" search!=null and search != '' and search != 'null' ">
        	AND
	        (
	        TITLE LIKE '%${search}%'
	        OR CONTENT LIKE '%${search}%'
	        )
	    </if>
	</select>
	
	<select id="selectList" resultType="MailVo">
		SELECT 
		    ROWNUM
		    , MAIL_NO
		    , USER_NO
		    , USER_NAME
		    , USER_EMAIL
		    , DELETE_YN
		    , TITLE
		    , CONTENT
		    , SEND_TIME
		    , CATEGORY_NO
		    , CATEGORY_NAME
		    , ISSENDER
		    , CHECK_YN
		    , SAVE_YN
		FROM 
		(
		    SELECT *
		    FROM
		    (
		    <trim prefixOverrides="UNION ALL">
		    <if test="!'받는메일함'.equals(categoryName)">
		        select 
		            M.NO AS MAIL_NO
		            ,M.SEND_USER AS USER_NO
		            ,MM.NAME AS USER_NAME
		            ,MM.EMAIL AS USER_EMAIL
		            ,M.DELETE_YN
		            ,M.TITLE
		            ,M.CONTENT
		            ,M.SEND_TIME
		            ,C.NO AS CATEGORY_NO
		            ,C.NAME AS CATEGORY_NAME
		            ,'Y' as ISSENDER
		            ,'Y' as CHECK_YN
		            , SAVE_YN
		        from mail m
		        join member mm on mm.no = m.SEND_USER
		        LEFT JOIN M_DRAWER D ON M.NO = D.MAIL_NO 
		        LEFT JOIN M_CATEGORY C ON C.NO = D.CATEGORY_NO
		        WHERE MM.NO = ${userNo}
		        AND (USER_NO = ${userNo} OR USER_NO IS NULL)
		        AND 
			    <if test="'임시보관함'.equals(categoryName)">
			    	SAVE_YN = 'Y'
			    </if>
			    <if test="!'임시보관함'.equals(categoryName)">
			    	SAVE_YN = 'N'
			    </if>
			</if>
			<if test="!'보낸메일함'.equals(categoryName) and !'임시보관함'.equals(categoryName)">
		        UNION ALL
		        select 
		            M.NO AS MAIL_NO
		            , M.SEND_USER AS USER_NO
		            , M2.NAME AS USER_NAME
		            , M2.EMAIL AS USER_EMAIL
		            , R.DELETE_YN
		            , M.TITLE
		            , M.CONTENT
		            , M.SEND_TIME
		            , C.NO AS CATEGORY_NO
		            , C.NAME AS CATEGORY_NAME
		            , 'N' AS ISSENDER
		            , R.CHECK_YN AS CHECK_YN
		            , SAVE_YN
		        from R_MAIL R
		        JOIN MEMBER M1 ON M1.EMAIL = R.EMAIL
		        JOIN MAIL M ON R.MAIL_NO = M.NO
		        JOIN MEMBER M2 ON M2.NO = M.SEND_USER
		        LEFT JOIN M_DRAWER D ON M.NO = D.MAIL_NO 
		        LEFT JOIN M_CATEGORY C ON C.NO = D.CATEGORY_NO
		        WHERE  R.EMAIL = #{userEmail}
		        AND SAVE_YN = 'N'
		        AND (USER_NO = ${userNo} OR USER_NO IS NULL)
			</if>
			</trim>
		    )
		    WHERE
		    <if test="'휴지통'.equals(categoryName)">
		    	DELETE_YN = 'Y'
		    </if>
		    <if test="!'휴지통'.equals(categoryName)">
		    	DELETE_YN = 'N'
		    </if>
			<if test=" category!=null and category != '' and category != 'null' ">
	            AND CATEGORY_NO = ${category}
	        </if>
	        <if test=" search!=null and search != '' and search != 'null' ">
	        	AND
		        (
		        TITLE LIKE '%${search}%'
		        OR CONTENT LIKE '%${search}%'
		        )
		    </if>
		    ORDER BY SEND_TIME DESC
		)
	</select>

	<insert id="write">
	    <selectKey keyProperty="mailNo" resultType="String" order="BEFORE">  
        select SEQ_MAIL_NO.NEXTVAL FROM dual
     	</selectKey>
		INSERT INTO MAIL
		VALUES
		(
			${mailNo},
			${userNo},
			'N',
			<if test=" saveYn.equals('작성하기') ">
				'N',
			</if>
			<if test=" saveYn.equals('임시저장') ">
				'Y',
			</if>
			#{title},
			#{content},
			SYSDATE,
			SYSDATE
		)
	</insert>
	
	<update id="update">
		UPDATE MAIL
		SET 
			TITLE = #{title}
			, CONTENT = #{content}
			, SAVE_YN =
			<if test=" saveYn.equals('작성하기') ">
				'N'
			</if>
			<if test=" saveYn.equals('임시저장') ">
				'Y'
			</if>
			, MODIFY_TIME = SYSDATE
		WHERE NO = ${mailNo}
	</update>
	
	<update id="sendUpdate">
		DECLARE BEGIN
		DELETE R_MAIL
		WHERE MAIL_NO = ${mailNo}
		AND NOT EMAIL IN
		<foreach collection="sender" item="email" open="(" close=");" separator=",">
			#{email}
		</foreach>
		<foreach collection="sender" item="email">
			MERGE INTO R_MAIL R
			USING 
			(
			    SELECT NO FROM R_MAIL WHERE EMAIL = #{email} AND MAIL_NO = ${mailNo}
			    UNION ALL
			    SELECT NULL FROM DUAL
			    WHERE NOT EXISTS
			    (
			    SELECT NO FROM R_MAIL WHERE EMAIL = #{email} AND MAIL_NO = ${mailNo}
			    )
			) R2
			ON (R.NO = R2.NO)
			WHEN NOT MATCHED THEN
			INSERT 
			(
			    NO
			    , MAIL_NO
			    , EMAIL
			    , CHECK_YN
			    , ALARM_YN
			    , DELETE_YN
			)
			VALUES
			(
			    get_seq_no('seq_r_mail_no'),
			    ${mailNo},
			    #{email},
			    'N',
			    'N',
			    'N'
			);
		</foreach>
		END;
	</update>
	
	<update id="send">
		insert all
		<foreach collection="sender" item="email" separator=" ">
			<if test=" email != '' ">
				into r_mail
				(
					no,
					mail_no,
					email,
					check_yn,
					alarm_yn,
					DELETE_YN
				)
				VALUES
				(
					get_seq_no('seq_r_mail_no'),
					${mailNo},
					#{email},
					'N',
					'N',
					'N'
				)
			</if>
		</foreach>
		select * from dual
	</update>

	<select id="selectOne" resultType="MailVo">
		SELECT 
		    	M.NO AS MAIL_NO
		    ,	M.SEND_USER AS USER_NO
            ,   MM.NAME AS USER_NAME
            ,   MM.EMAIL AS USER_EMAIL
		    ,	M.DELETE_YN AS DELETE_YN
		    ,	M.TITLE
		    ,	M.CONTENT
		    ,	M.SAVE_YN
		    ,	M.SEND_TIME
		    ,	M.MODIFY_TIME
		FROM MAIL M
        LEFT JOIN MEMBER MM     ON M.SEND_USER = MM.NO
		where M.NO = ${no}
	</select>
	
	<update id="delete">
		DECLARE BEGIN
		UPDATE MAIL
		SET DELETE_YN = 'Y'
		WHERE NO IN 
		<foreach collection="no" item="n" separator="," open="(" close=")">
			${n}
		</foreach>
		AND
		SEND_USER = #{loginMember.no};
		UPDATE MAIL_VIEW
		SET R_DELETE_YN = 'Y'
		WHERE NO IN 
		<foreach collection="no" item="n" separator="," open="(" close=")">
			${n}
		</foreach>
		AND
		R_MAIL = #{loginMember.email};
		END;
	</update>

	<update id="updateRead">
		UPDATE MAIL_VIEW
		SET CHECK_YN = 'Y'
		WHERE NO IN 
		<foreach collection="no" item="n" separator="," open="(" close=")">
			${n}
		</foreach>
		AND
		R_MAIL = #{loginMember.email}
	</update>
	
	<insert id="createCategory">
		insert into m_category
		values
		(
			seq_m_category_no.nextval,
			${userNo},
			#{category}
		)
	</insert>
	
	<select id="categoryList" resultType="Map">
		select no, name from m_category
		where user_no = ${no}
	</select>
	
	<update id="restore">
		DECLARE BEGIN
		UPDATE MAIL
		SET DELETE_YN = 'N'
		WHERE NO IN 
		<foreach collection="no" item="n" separator="," open="(" close=")">
			${n}
		</foreach>
		AND
		SEND_USER = #{loginMember.no};
		UPDATE MAIL_VIEW
		SET R_DELETE_YN = 'N'
		WHERE NO IN 
		<foreach collection="no" item="n" separator="," open="(" close=")">
			${n}
		</foreach>
		AND
		R_MAIL = #{loginMember.email};
		END;
	</update>
		
	<update id="realDelete">
		DECLARE BEGIN
		UPDATE MAIL
		SET DELETE_YN = NULL
		WHERE NO IN 
		<foreach collection="no" item="n" separator="," open="(" close=")">
			${n}
		</foreach>
		AND
		SEND_USER = #{loginMember.no};
		UPDATE MAIL_VIEW
		SET R_DELETE_YN = 'R'
		WHERE NO IN 
		<foreach collection="no" item="n" separator="," open="(" close=")">
			${n}
		</foreach>
		AND
		R_MAIL = #{loginMember.email};
		END;
	</update>
	
	<update id="changeCategory">
		DECLARE BEGIN
		<foreach collection="no" item="n">
			MERGE
			INTO M_DRAWER M
			USING 
			(
			    SELECT M.NO AS NO, CATEGORY_NO
			    FROM M_DRAWER M
			    JOIN M_CATEGORY MC ON M.CATEGORY_NO = MC.NO
			    WHERE USER_NO = ${loginMember.no}
			    AND MAIL_NO = ${n}
			    union all
			    select null, null FROM DUAL
			    WHERE NOT EXISTS
			    (
			    SELECT M.NO AS NO, CATEGORY_NO
			    FROM M_DRAWER M
			    JOIN M_CATEGORY MC ON M.CATEGORY_NO = MC.NO
			    WHERE USER_NO = ${loginMember.no}
			    AND MAIL_NO = ${n}
			    )
			) MV
			ON (M.NO = MV.NO)
			WHEN MATCHED THEN
			UPDATE SET CATEGORY_NO = ${category}
			WHEN NOT MATCHED THEN
			INSERT 
			(NO, CATEGORY_NO, MAIL_NO)
			VALUES
			(SEQ_M_DRAWER_NO.NEXTVAL, ${category}, ${n});
		</foreach>
		END;
	</update>
	
	<select id="getSender" resultType="String">
		SELECT EMAIL FROM R_MAIL
		WHERE MAIL_NO = ${no}
	</select>

    
</mapper>